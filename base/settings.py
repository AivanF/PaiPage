"""
Django settings.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SECRET_KEY = 'm4e9!dp37ve)g6zt_0#82qg^p4cwy=1i&nkh*03^wiai5#7xc'

if os.environ.get('DEBUG') == '1':
	DEBUG = True
	ALLOWED_HOSTS = ['*']
	print('** Debug is ON!')
else:
	DEBUG = False
	ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

LOGIN_URL = '/'
DEBUG = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
# https://stackoverflow.com/questions/8687927/django-static-static-url-static-root

DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 2**20
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'real_static')

STATICFILES_DIRS = [
	os.path.join(BASE_DIR, 'static'),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'base.wsgi.application'

ROOT_URLCONF = 'base.urls'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.sqlite3',
		'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
		# 'ENGINE': 'django.db.backends.mysql',
		# 'CONN_MAX_AGE': 0,
		# 'NAME': 'db_name',
		# 'USER': 'db_username',
		# 'PASSWORD': 'db_password',
		# 'HOST': 'localhost',
		# 'PORT': '',
		# 'OPTIONS': {'charset': 'utf8mb4'},
	},
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	}, {
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	}, {
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	}, {
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = False
USE_L10N = False
USE_TZ = True


import paipage
paipage.Configurate(
	__name__,
	site_name='PaiPage',
	template_default='page.html',
	language_default='en',
	language_available=[
		paipage.Language(
			code='en',
			strings=dict(
				name='English',
				languages='Other languages',
				error404='Not found',
				errorNoLang='Not available in this language',
			),
		),
		paipage.Language(
			code='ru',
			strings=dict(
				name='Русский',
				languages='Другие языки',
				error404='Не найдено',
				errorNoLang='Не доступно на этом языке',
			),
		),
	],
)
